import pytest
from unittest.mock import MagicMock, patch
from berlayar.services.user import UserService, UserNotFoundException, UserAlreadyExistsException, InvalidFieldException

@pytest.fixture
def user_service():
    # Mock storage interface
    storage_interface = MagicMock()
    return UserService(storage_interface)

def test_create_user(user_service):
    # Define user data
    user_data = {
        "preferred_name": "Alice",
        "age": 25,
        "country": "USA",
        "mobile_number": "1234567890"
    }

    # Mock storage interface's save_data method
    user_service.storage_interface.save_data.return_value = "123abc"  # Simulate user ID generated by storage

    # Create user
    user_id = user_service.create_user(user_data)

    # Assert that user was created successfully
    assert user_id is not None

    # Assert that the storage interface's save_data method was called with the correct parameters
    user_service.storage_interface.save_data.assert_called_once_with("123abc", user_data)

def test_create_user_already_exists(user_service):
    # Define user data for an existing user
    existing_user_data = {
        "preferred_name": "Bob",
        "age": 30,
        "country": "Canada",
        "mobile_number": "9876543210"
    }

    # Mock storage interface's save_data method to raise UserAlreadyExistsException
    user_service.storage_interface.save_data.side_effect = UserAlreadyExistsException()

    # Attempt to create user with existing data
    with pytest.raises(UserAlreadyExistsException):
        user_service.create_user(existing_user_data)

def test_get_user(user_service):
    # Define user ID
    user_id = "123abc"

    # Mock storage interface's load_data method to return user data
    user_data = {
        "preferred_name": "Alice",
        "age": 25,
        "country": "USA",
        "mobile_number": "1234567890"
    }
    user_service.storage_interface.load_data.return_value = user_data

    # Get user
    retrieved_user = user_service.get_user(user_id)

    # Assert that the user data matches the expected data
    assert retrieved_user == user_data

def test_get_user_not_found(user_service):
    # Define non-existent user ID
    non_existent_user_id = "invalid_id"

    # Mock storage interface's load_data method to raise UserNotFoundException
    user_service.storage_interface.load_data.side_effect = UserNotFoundException()

    # Attempt to get non-existent user
    with pytest.raises(UserNotFoundException):
        user_service.get_user(non_existent_user_id)

def test_update_user(user_service):
    # Define user ID and updated data
    user_id = "123abc"
    updated_user_data = {
        "preferred_name": "Alice",
        "age": 26,
        "country": "USA",
        "mobile_number": "1234567890"
    }

    # Update user
    user_service.update_user(user_id, updated_user_data)

    # Assert that the storage interface's save_data method was called with the correct parameters
    user_service.storage_interface.save_data.assert_called_once_with(user_id, updated_user_data)

def test_partial_update_user(user_service):
    # Define user ID and partial update data
    user_id = "123abc"
    partial_update_data = {
        "age": 26,
        "mobile_number": "1234567890"
    }

    # Update user with partial data
    user_service.update_user(user_id, partial_update_data)

    # Assert that the storage interface's save_data method was called with the correct parameters
    # Check that only the specified fields are updated while others remain unchanged
    expected_updated_data = {
        "preferred_name": "Alice",  # Unchanged
        "age": 26,  # Updated
        "country": "USA",  # Unchanged
        "mobile_number": "1234567890"  # Updated
    }
    user_service.storage_interface.save_data.assert_called_once_with(user_id, expected_updated_data)

def test_delete_user(user_service):
    # Define user ID
    user_id = "123abc"

    # Delete user
    user_service.delete_user(user_id)

    # Assert that the storage interface's delete_data method was called with the correct parameters
    user_service.storage_interface.delete_data.assert_called_once_with(user_id)

def test_partial_update_user_not_existing(user_service):
    # Define non-existent user ID and partial update data
    non_existent_user_id = "invalid_id"
    partial_update_data = {
        "age": 26,
        "mobile_number": "1234567890"
    }

    # Attempt to update non-existent user with partial data
    with pytest.raises(UserNotFoundException):
        user_service.update_user(non_existent_user_id, partial_update_data)

def test_partial_update_invalid_field(user_service):
    # Define user ID and invalid partial update data (invalid field)
    user_id = "123abc"
    partial_update_data = {
        "invalid_field": "value"
    }

    # Attempt to update user with invalid partial data
    with pytest.raises(InvalidFieldException):
        user_service.update_user(user_id, partial_update_data)
